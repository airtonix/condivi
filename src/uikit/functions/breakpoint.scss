/*
breakpoint

These functions standardise the construction of media queries for supported
screen sizes.

The idea is that a project has defined screen sizes to support and that they would
be defined in `./src/core/construct/settings/breakpoints.scss` or
`./src/ABC123/construct/settings/breakpoints.scss` as the upper pixel end of each
screen size.

`breakpoint-get(Z)` - get the upper pixel size of a breakpoint name Z
`breakpoint-lt(X)` - less than X. returns a media rule string.
`breakpoint-lte(X)` - less than or equal to X. returns a media rule string.
`breakpoint-gt(X)` - greater than X. returns a media rule string.
`breakpoint-gte(X)` - greater than or equal to X. returns a media rule string.
`breakpoint-between(X,Y)` - greater than X and less than Y. returns a media rule string.
`breakpoint(X,Y)` - ifgreater than or equal to X and less than Y. returns a media rule string.
`breakpoint(X)` - alias to breakpoint-gte X. returns a media rule string.

Styleguide Core.Functions.Breakpoints
*/


/*
 browsers always use 16px regardless of the font-size set on the html or body elements
 - see http://www.filamentgroup.com/lab/how-we-learned-to-leave-body-font-size-alone.html
*/
@function breakpoint-get($name){
  @if map-has-key($settings__breakpoints, $name ) {
    @return map-get($settings__breakpoints, $name);
  }
  @else {
    @return $name;
  }
}
@function breakpoint-lt($to) {
  @return "(max-width: #{rem-calc(breakpoint-get($to) - 1px, 16px)})";
}

@function breakpoint-lte($to) {
  @return "(max-width: #{rem-calc(breakpoint-get($to), 16px)})";
}

@function breakpoint-gt($from) {
  @return "(min-width: #{rem-calc(breakpoint-get($from) + 1px, 16px)})";
}

@function breakpoint-gte($from) {
  @return "(min-width: #{rem-calc(breakpoint-get($from), 16px)})";
}

@function breakpoint-between($from, $to) {
  @return "#{breakpoint-gt($from)} and #{breakpoint-lt($to)}";
}

@function breakpoint($from, $to: null) {

  @if ($from and $to) {
    @return "#{breakpoint-gte($from)} and #{breakpoint-lt($to)}";
  } @else if ($from) {
    @return breakpoint-gte($from);
  }

}


@function mq($name) {
  @if (map-has-key($settings__breakpoints, $name) != true) {
    @return "";
  }
  @return map-get(settings__breakpoints, $name);
}
